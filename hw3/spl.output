State 1 conflicts: 1 shift/reduce
State 5 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: "begin" constDecls varDecls procDecls stmts "end"

    3 constDecls: constDecls constDecl
    4           | constDecl
    5           | empty

    6 constDecl: "const" constDefList ";"

    7 constDefList: constDef
    8             | constDefList "," constDef

    9 constDef: identsym "=" numbersym

   10 varDecls: varDecls varDecl
   11         | varDecl
   12         | empty

   13 varDecl: "var" identList ";"

   14 identList: identsym
   15          | identList "," identsym

   16 procDecls: procDecls ";" procDecl
   17          | procDecl
   18          | empty

   19 procDecl: "proc" identsym block ";"

   20 stmts: empty
   21      | stmtList

   22 empty: ε

   23 stmtList: stmt
   24         | stmtList ";" stmt

   25 stmt: assignStmt
   26     | callStmt
   27     | ifStmt
   28     | whileStmt
   29     | readStmt
   30     | printStmt
   31     | blockStmt

   32 assignStmt: identsym ":=" expr

   33 callStmt: "call" identsym

   34 ifStmt: "if" condition "then" stmts "else" stmts "end"
   35       | "if" condition "then" stmts "end"

   36 whileStmt: "while" condition "do" stmts "end"

   37 readStmt: "read" identsym

   38 printStmt: "print" expr

   39 blockStmt: block

   40 condition: dbCondition
   41          | relOpCondition

   42 dbCondition: "divisible" expr "by" expr

   43 relOpCondition: expr relOp expr

   44 relOp: "=="
   45      | "!="
   46      | "<"
   47      | "<="
   48      | ">"
   49      | ">="

   50 expr: term
   51     | expr "+" term
   52     | expr "-" term

   53 term: factor
   54     | term "*" factor
   55     | term "/" factor

   56 factor: identsym
   57       | numbersym
   58       | "-" factor
   59       | "+" factor
   60       | "(" expr ")"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 14 15 19 32 33 37 56
    numbersym <number> (259) 9 57
    "+" <token> (260) 51 59
    "-" <token> (261) 52 58
    "*" <token> (262) 54
    "/" <token> (263) 55
    "." <token> (264) 1
    ";" <token> (265) 6 13 16 19 24
    "=" <token> (266) 9
    "," <token> (267) 8 15
    ":=" <token> (268) 32
    "(" <token> (269) 60
    ")" <token> (270) 60
    "const" <token> (271) 6
    "var" <token> (272) 13
    "proc" <token> (273) 19
    "call" <token> (274) 33
    "begin" <token> (275) 2
    "end" <token> (276) 2 34 35 36
    "if" <token> (277) 34 35
    "then" <token> (278) 34 35
    "else" <token> (279) 34
    "while" <token> (280) 36
    "do" <token> (281) 36
    "read" <token> (282) 37
    "print" <token> (283) 38
    "divisible" <token> (284) 42
    "by" <token> (285) 42
    "==" <token> (286) 44
    "!=" <token> (287) 45
    "<" <token> (288) 46
    "<=" <token> (289) 47
    ">" <token> (290) 48
    ">=" <token> (291) 49


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <block> (38)
        on left: 1
        on right: 0
    block <block> (39)
        on left: 2
        on right: 1 19 39
    constDecls <const_decls> (40)
        on left: 3 4 5
        on right: 2 3
    constDecl <const_decl> (41)
        on left: 6
        on right: 3 4
    constDefList <const_def_list> (42)
        on left: 7 8
        on right: 6 8
    constDef <const_def> (43)
        on left: 9
        on right: 7 8
    varDecls <var_decls> (44)
        on left: 10 11 12
        on right: 2 10
    varDecl <var_decl> (45)
        on left: 13
        on right: 10 11
    identList <ident_list> (46)
        on left: 14 15
        on right: 13 15
    procDecls <proc_decls> (47)
        on left: 16 17 18
        on right: 2 16
    procDecl <proc_decl> (48)
        on left: 19
        on right: 16 17
    stmts <stmts> (49)
        on left: 20 21
        on right: 2 34 35 36
    empty <empty> (50)
        on left: 22
        on right: 5 12 18 20
    stmtList <stmt_list> (51)
        on left: 23 24
        on right: 21 24
    stmt <stmt> (52)
        on left: 25 26 27 28 29 30 31
        on right: 23 24
    assignStmt <assign_stmt> (53)
        on left: 32
        on right: 25
    callStmt <call_stmt> (54)
        on left: 33
        on right: 26
    ifStmt <if_stmt> (55)
        on left: 34 35
        on right: 27
    whileStmt <while_stmt> (56)
        on left: 36
        on right: 28
    readStmt <read_stmt> (57)
        on left: 37
        on right: 29
    printStmt <print_stmt> (58)
        on left: 38
        on right: 30
    blockStmt <block_stmt> (59)
        on left: 39
        on right: 31
    condition <condition> (60)
        on left: 40 41
        on right: 34 35 36
    dbCondition <db_condition> (61)
        on left: 42
        on right: 40
    relOpCondition <rel_op_condition> (62)
        on left: 43
        on right: 41
    relOp <token> (63)
        on left: 44 45 46 47 48 49
        on right: 43
    expr <expr> (64)
        on left: 50 51 52
        on right: 32 38 42 43 51 52 60
    term <expr> (65)
        on left: 53 54 55
        on right: 50 51 52 54 55
    factor <expr> (66)
        on left: 56 57 58 59 60
        on right: 53 54 55 58 59


State 0

    0 $accept: • program $end

    "begin"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: "begin" • constDecls varDecls procDecls stmts "end"

    "const"  shift, and go to state 4

    "const"   [reduce using rule 22 (empty)]
    $default  reduce using rule 22 (empty)

    constDecls  go to state 5
    constDecl   go to state 6
    empty       go to state 7

    shift/reduce conflict on token "const":
       22 empty: ε •
        6 constDecl: • "const" constDefList ";"
      Example: • "const" constDefList ";"
      Shift derivation
        constDecls
        ↳ 4: constDecl
             ↳ 6: • "const" constDefList ";"
      Reduce derivation
        constDecls
        ↳ 3: constDecls     constDecl
             ↳ 5: empty     ↳ 6: "const" constDefList ";"
                  ↳ 22: ε •



State 2

    0 $accept: program • $end

    $end  shift, and go to state 8


State 3

    1 program: block • "."

    "."  shift, and go to state 9


State 4

    6 constDecl: "const" • constDefList ";"

    identsym  shift, and go to state 10

    constDefList  go to state 11
    constDef      go to state 12


State 5

    2 block: "begin" constDecls • varDecls procDecls stmts "end"
    3 constDecls: constDecls • constDecl

    "const"  shift, and go to state 4
    "var"    shift, and go to state 13

    "var"     [reduce using rule 22 (empty)]
    $default  reduce using rule 22 (empty)

    constDecl  go to state 14
    varDecls   go to state 15
    varDecl    go to state 16
    empty      go to state 17

    shift/reduce conflict on token "var":
       22 empty: ε •
       13 varDecl: • "var" identList ";"
      Example: • "var" identList ";"
      Shift derivation
        varDecls
        ↳ 11: varDecl
              ↳ 13: • "var" identList ";"
      Reduce derivation
        varDecls
        ↳ 10: varDecls        varDecl
              ↳ 12: empty     ↳ 13: "var" identList ";"
                    ↳ 22: ε •



State 6

    4 constDecls: constDecl •

    $default  reduce using rule 4 (constDecls)


State 7

    5 constDecls: empty •

    $default  reduce using rule 5 (constDecls)


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 10

    9 constDef: identsym • "=" numbersym

    "="  shift, and go to state 18


State 11

    6 constDecl: "const" constDefList • ";"
    8 constDefList: constDefList • "," constDef

    ";"  shift, and go to state 19
    ","  shift, and go to state 20


State 12

    7 constDefList: constDef •

    $default  reduce using rule 7 (constDefList)


State 13

   13 varDecl: "var" • identList ";"

    identsym  shift, and go to state 21

    identList  go to state 22


State 14

    3 constDecls: constDecls constDecl •

    $default  reduce using rule 3 (constDecls)


State 15

    2 block: "begin" constDecls varDecls • procDecls stmts "end"
   10 varDecls: varDecls • varDecl

    "var"   shift, and go to state 13
    "proc"  shift, and go to state 23

    $default  reduce using rule 22 (empty)

    varDecl    go to state 24
    procDecls  go to state 25
    procDecl   go to state 26
    empty      go to state 27


State 16

   11 varDecls: varDecl •

    $default  reduce using rule 11 (varDecls)


State 17

   12 varDecls: empty •

    $default  reduce using rule 12 (varDecls)


State 18

    9 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 28


State 19

    6 constDecl: "const" constDefList ";" •

    $default  reduce using rule 6 (constDecl)


State 20

    8 constDefList: constDefList "," • constDef

    identsym  shift, and go to state 10

    constDef  go to state 29


State 21

   14 identList: identsym •

    $default  reduce using rule 14 (identList)


State 22

   13 varDecl: "var" identList • ";"
   15 identList: identList • "," identsym

    ";"  shift, and go to state 30
    ","  shift, and go to state 31


State 23

   19 procDecl: "proc" • identsym block ";"

    identsym  shift, and go to state 32


State 24

   10 varDecls: varDecls varDecl •

    $default  reduce using rule 10 (varDecls)


State 25

    2 block: "begin" constDecls varDecls procDecls • stmts "end"
   16 procDecls: procDecls • ";" procDecl

    identsym  shift, and go to state 33
    ";"       shift, and go to state 34
    "call"    shift, and go to state 35
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 36
    "while"   shift, and go to state 37
    "read"    shift, and go to state 38
    "print"   shift, and go to state 39

    $default  reduce using rule 22 (empty)

    block       go to state 40
    stmts       go to state 41
    empty       go to state 42
    stmtList    go to state 43
    stmt        go to state 44
    assignStmt  go to state 45
    callStmt    go to state 46
    ifStmt      go to state 47
    whileStmt   go to state 48
    readStmt    go to state 49
    printStmt   go to state 50
    blockStmt   go to state 51


State 26

   17 procDecls: procDecl •

    $default  reduce using rule 17 (procDecls)


State 27

   18 procDecls: empty •

    $default  reduce using rule 18 (procDecls)


State 28

    9 constDef: identsym "=" numbersym •

    $default  reduce using rule 9 (constDef)


State 29

    8 constDefList: constDefList "," constDef •

    $default  reduce using rule 8 (constDefList)


State 30

   13 varDecl: "var" identList ";" •

    $default  reduce using rule 13 (varDecl)


State 31

   15 identList: identList "," • identsym

    identsym  shift, and go to state 52


State 32

   19 procDecl: "proc" identsym • block ";"

    "begin"  shift, and go to state 1

    block  go to state 53


State 33

   32 assignStmt: identsym • ":=" expr

    ":="  shift, and go to state 54


State 34

   16 procDecls: procDecls ";" • procDecl

    "proc"  shift, and go to state 23

    procDecl  go to state 55


State 35

   33 callStmt: "call" • identsym

    identsym  shift, and go to state 56


State 36

   34 ifStmt: "if" • condition "then" stmts "else" stmts "end"
   35       | "if" • condition "then" stmts "end"

    identsym     shift, and go to state 57
    numbersym    shift, and go to state 58
    "+"          shift, and go to state 59
    "-"          shift, and go to state 60
    "("          shift, and go to state 61
    "divisible"  shift, and go to state 62

    condition       go to state 63
    dbCondition     go to state 64
    relOpCondition  go to state 65
    expr            go to state 66
    term            go to state 67
    factor          go to state 68


State 37

   36 whileStmt: "while" • condition "do" stmts "end"

    identsym     shift, and go to state 57
    numbersym    shift, and go to state 58
    "+"          shift, and go to state 59
    "-"          shift, and go to state 60
    "("          shift, and go to state 61
    "divisible"  shift, and go to state 62

    condition       go to state 69
    dbCondition     go to state 64
    relOpCondition  go to state 65
    expr            go to state 66
    term            go to state 67
    factor          go to state 68


State 38

   37 readStmt: "read" • identsym

    identsym  shift, and go to state 70


State 39

   38 printStmt: "print" • expr

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 71
    term    go to state 67
    factor  go to state 68


State 40

   39 blockStmt: block •

    $default  reduce using rule 39 (blockStmt)


State 41

    2 block: "begin" constDecls varDecls procDecls stmts • "end"

    "end"  shift, and go to state 72


State 42

   20 stmts: empty •

    $default  reduce using rule 20 (stmts)


State 43

   21 stmts: stmtList •
   24 stmtList: stmtList • ";" stmt

    ";"  shift, and go to state 73

    $default  reduce using rule 21 (stmts)


State 44

   23 stmtList: stmt •

    $default  reduce using rule 23 (stmtList)


State 45

   25 stmt: assignStmt •

    $default  reduce using rule 25 (stmt)


State 46

   26 stmt: callStmt •

    $default  reduce using rule 26 (stmt)


State 47

   27 stmt: ifStmt •

    $default  reduce using rule 27 (stmt)


State 48

   28 stmt: whileStmt •

    $default  reduce using rule 28 (stmt)


State 49

   29 stmt: readStmt •

    $default  reduce using rule 29 (stmt)


State 50

   30 stmt: printStmt •

    $default  reduce using rule 30 (stmt)


State 51

   31 stmt: blockStmt •

    $default  reduce using rule 31 (stmt)


State 52

   15 identList: identList "," identsym •

    $default  reduce using rule 15 (identList)


State 53

   19 procDecl: "proc" identsym block • ";"

    ";"  shift, and go to state 74


State 54

   32 assignStmt: identsym ":=" • expr

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 75
    term    go to state 67
    factor  go to state 68


State 55

   16 procDecls: procDecls ";" procDecl •

    $default  reduce using rule 16 (procDecls)


State 56

   33 callStmt: "call" identsym •

    $default  reduce using rule 33 (callStmt)


State 57

   56 factor: identsym •

    $default  reduce using rule 56 (factor)


State 58

   57 factor: numbersym •

    $default  reduce using rule 57 (factor)


State 59

   59 factor: "+" • factor

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    factor  go to state 76


State 60

   58 factor: "-" • factor

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    factor  go to state 77


State 61

   60 factor: "(" • expr ")"

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 78
    term    go to state 67
    factor  go to state 68


State 62

   42 dbCondition: "divisible" • expr "by" expr

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 79
    term    go to state 67
    factor  go to state 68


State 63

   34 ifStmt: "if" condition • "then" stmts "else" stmts "end"
   35       | "if" condition • "then" stmts "end"

    "then"  shift, and go to state 80


State 64

   40 condition: dbCondition •

    $default  reduce using rule 40 (condition)


State 65

   41 condition: relOpCondition •

    $default  reduce using rule 41 (condition)


State 66

   43 relOpCondition: expr • relOp expr
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"   shift, and go to state 81
    "-"   shift, and go to state 82
    "=="  shift, and go to state 83
    "!="  shift, and go to state 84
    "<"   shift, and go to state 85
    "<="  shift, and go to state 86
    ">"   shift, and go to state 87
    ">="  shift, and go to state 88

    relOp  go to state 89


State 67

   50 expr: term •
   54 term: term • "*" factor
   55     | term • "/" factor

    "*"  shift, and go to state 90
    "/"  shift, and go to state 91

    $default  reduce using rule 50 (expr)


State 68

   53 term: factor •

    $default  reduce using rule 53 (term)


State 69

   36 whileStmt: "while" condition • "do" stmts "end"

    "do"  shift, and go to state 92


State 70

   37 readStmt: "read" identsym •

    $default  reduce using rule 37 (readStmt)


State 71

   38 printStmt: "print" expr •
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82

    $default  reduce using rule 38 (printStmt)


State 72

    2 block: "begin" constDecls varDecls procDecls stmts "end" •

    $default  reduce using rule 2 (block)


State 73

   24 stmtList: stmtList ";" • stmt

    identsym  shift, and go to state 33
    "call"    shift, and go to state 35
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 36
    "while"   shift, and go to state 37
    "read"    shift, and go to state 38
    "print"   shift, and go to state 39

    block       go to state 40
    stmt        go to state 93
    assignStmt  go to state 45
    callStmt    go to state 46
    ifStmt      go to state 47
    whileStmt   go to state 48
    readStmt    go to state 49
    printStmt   go to state 50
    blockStmt   go to state 51


State 74

   19 procDecl: "proc" identsym block ";" •

    $default  reduce using rule 19 (procDecl)


State 75

   32 assignStmt: identsym ":=" expr •
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82

    $default  reduce using rule 32 (assignStmt)


State 76

   59 factor: "+" factor •

    $default  reduce using rule 59 (factor)


State 77

   58 factor: "-" factor •

    $default  reduce using rule 58 (factor)


State 78

   51 expr: expr • "+" term
   52     | expr • "-" term
   60 factor: "(" expr • ")"

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82
    ")"  shift, and go to state 94


State 79

   42 dbCondition: "divisible" expr • "by" expr
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"   shift, and go to state 81
    "-"   shift, and go to state 82
    "by"  shift, and go to state 95


State 80

   34 ifStmt: "if" condition "then" • stmts "else" stmts "end"
   35       | "if" condition "then" • stmts "end"

    identsym  shift, and go to state 33
    "call"    shift, and go to state 35
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 36
    "while"   shift, and go to state 37
    "read"    shift, and go to state 38
    "print"   shift, and go to state 39

    $default  reduce using rule 22 (empty)

    block       go to state 40
    stmts       go to state 96
    empty       go to state 42
    stmtList    go to state 43
    stmt        go to state 44
    assignStmt  go to state 45
    callStmt    go to state 46
    ifStmt      go to state 47
    whileStmt   go to state 48
    readStmt    go to state 49
    printStmt   go to state 50
    blockStmt   go to state 51


State 81

   51 expr: expr "+" • term

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    term    go to state 97
    factor  go to state 68


State 82

   52 expr: expr "-" • term

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    term    go to state 98
    factor  go to state 68


State 83

   44 relOp: "==" •

    $default  reduce using rule 44 (relOp)


State 84

   45 relOp: "!=" •

    $default  reduce using rule 45 (relOp)


State 85

   46 relOp: "<" •

    $default  reduce using rule 46 (relOp)


State 86

   47 relOp: "<=" •

    $default  reduce using rule 47 (relOp)


State 87

   48 relOp: ">" •

    $default  reduce using rule 48 (relOp)


State 88

   49 relOp: ">=" •

    $default  reduce using rule 49 (relOp)


State 89

   43 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 99
    term    go to state 67
    factor  go to state 68


State 90

   54 term: term "*" • factor

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    factor  go to state 100


State 91

   55 term: term "/" • factor

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    factor  go to state 101


State 92

   36 whileStmt: "while" condition "do" • stmts "end"

    identsym  shift, and go to state 33
    "call"    shift, and go to state 35
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 36
    "while"   shift, and go to state 37
    "read"    shift, and go to state 38
    "print"   shift, and go to state 39

    $default  reduce using rule 22 (empty)

    block       go to state 40
    stmts       go to state 102
    empty       go to state 42
    stmtList    go to state 43
    stmt        go to state 44
    assignStmt  go to state 45
    callStmt    go to state 46
    ifStmt      go to state 47
    whileStmt   go to state 48
    readStmt    go to state 49
    printStmt   go to state 50
    blockStmt   go to state 51


State 93

   24 stmtList: stmtList ";" stmt •

    $default  reduce using rule 24 (stmtList)


State 94

   60 factor: "(" expr ")" •

    $default  reduce using rule 60 (factor)


State 95

   42 dbCondition: "divisible" expr "by" • expr

    identsym   shift, and go to state 57
    numbersym  shift, and go to state 58
    "+"        shift, and go to state 59
    "-"        shift, and go to state 60
    "("        shift, and go to state 61

    expr    go to state 103
    term    go to state 67
    factor  go to state 68


State 96

   34 ifStmt: "if" condition "then" stmts • "else" stmts "end"
   35       | "if" condition "then" stmts • "end"

    "end"   shift, and go to state 104
    "else"  shift, and go to state 105


State 97

   51 expr: expr "+" term •
   54 term: term • "*" factor
   55     | term • "/" factor

    "*"  shift, and go to state 90
    "/"  shift, and go to state 91

    $default  reduce using rule 51 (expr)


State 98

   52 expr: expr "-" term •
   54 term: term • "*" factor
   55     | term • "/" factor

    "*"  shift, and go to state 90
    "/"  shift, and go to state 91

    $default  reduce using rule 52 (expr)


State 99

   43 relOpCondition: expr relOp expr •
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82

    $default  reduce using rule 43 (relOpCondition)


State 100

   54 term: term "*" factor •

    $default  reduce using rule 54 (term)


State 101

   55 term: term "/" factor •

    $default  reduce using rule 55 (term)


State 102

   36 whileStmt: "while" condition "do" stmts • "end"

    "end"  shift, and go to state 106


State 103

   42 dbCondition: "divisible" expr "by" expr •
   51 expr: expr • "+" term
   52     | expr • "-" term

    "+"  shift, and go to state 81
    "-"  shift, and go to state 82

    $default  reduce using rule 42 (dbCondition)


State 104

   35 ifStmt: "if" condition "then" stmts "end" •

    $default  reduce using rule 35 (ifStmt)


State 105

   34 ifStmt: "if" condition "then" stmts "else" • stmts "end"

    identsym  shift, and go to state 33
    "call"    shift, and go to state 35
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 36
    "while"   shift, and go to state 37
    "read"    shift, and go to state 38
    "print"   shift, and go to state 39

    $default  reduce using rule 22 (empty)

    block       go to state 40
    stmts       go to state 107
    empty       go to state 42
    stmtList    go to state 43
    stmt        go to state 44
    assignStmt  go to state 45
    callStmt    go to state 46
    ifStmt      go to state 47
    whileStmt   go to state 48
    readStmt    go to state 49
    printStmt   go to state 50
    blockStmt   go to state 51


State 106

   36 whileStmt: "while" condition "do" stmts "end" •

    $default  reduce using rule 36 (whileStmt)


State 107

   34 ifStmt: "if" condition "then" stmts "else" stmts • "end"

    "end"  shift, and go to state 108


State 108

   34 ifStmt: "if" condition "then" stmts "else" stmts "end" •

    $default  reduce using rule 34 (ifStmt)
