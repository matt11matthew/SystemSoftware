Nonterminals useless in grammar

    varDecl
    identList
    stmtList
    stmt
    assignStmt
    callStmt
    ifStmt
    whileStmt
    readStmt
    printStmt
    blockStmt
    condition
    dbCondition
    relOpCondition
    relOp
    expr
    term
    factor
    constDef
    blocksym
    procDecl


Terminals unused in grammar

    identsym
    numbersym
    "+"
    "-"
    "*"
    "/"
    "="
    ","
    ":="
    "("
    ")"
    "var"
    "proc"
    "call"
    "if"
    "then"
    "else"
    "while"
    "do"
    "read"
    "print"
    "divisible"
    "by"
    "=="
    "!="
    "<"
    "<="
    ">"
    ">="


Rules useless in grammar

   12 constDef: identsym "=" numbersym

   13 blocksym: %empty

   14 procDecl: "proc" identsym blocksym


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: "begin" constDecls varDecls procDecls stmts "end"

    3 constDecls: constDecls ';' constDecl
    4           | constDecl
    5           | empty

    6 constDecl: "const" constDefList ";"

    7 constDefList: %empty

    8 varDecls: empty

    9 procDecls: empty

   10 stmts: empty

   11 empty: %empty


Terminals, with rules where they appear

    $end (0) 0
    ';' (59) 3
    error (256)
    identsym <ident> (258)
    numbersym <number> (259)
    "+" <token> (260)
    "-" <token> (261)
    "*" <token> (262)
    "/" <token> (263)
    "." <token> (264) 1
    ";" <token> (265) 6
    "=" <token> (266)
    "," <token> (267)
    ":=" <token> (268)
    "(" <token> (269)
    ")" <token> (270)
    "const" <token> (271) 6
    "var" <token> (272)
    "proc" <token> (273)
    "call" <token> (274)
    "begin" <token> (275) 2
    "end" <token> (276) 2
    "if" <token> (277)
    "then" <token> (278)
    "else" <token> (279)
    "while" <token> (280)
    "do" <token> (281)
    "read" <token> (282)
    "print" <token> (283)
    "divisible" <token> (284)
    "by" <token> (285)
    "==" <token> (286)
    "!=" <token> (287)
    "<" <token> (288)
    "<=" <token> (289)
    ">" <token> (290)
    ">=" <token> (291)


Nonterminals, with rules where they appear

    $accept (38)
        on left: 0
    program <block> (39)
        on left: 1
        on right: 0
    block <block> (40)
        on left: 2
        on right: 1
    constDecls <const_decls> (41)
        on left: 3 4 5
        on right: 2 3
    constDecl <const_decl> (42)
        on left: 6
        on right: 3 4
    constDefList <const_def_list> (43)
        on left: 7
        on right: 6
    varDecls <var_decls> (44)
        on left: 8
        on right: 2
    procDecls <proc_decls> (45)
        on left: 9
        on right: 2
    stmts <stmts> (46)
        on left: 10
        on right: 2
    empty <empty> (47)
        on left: 11
        on right: 5 8 9 10


State 0

    0 $accept: . program $end

    "begin"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: "begin" . constDecls varDecls procDecls stmts "end"

    "const"  shift, and go to state 4

    $default  reduce using rule 11 (empty)

    constDecls  go to state 5
    constDecl   go to state 6
    empty       go to state 7


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: block . "."

    "."  shift, and go to state 9


State 4

    6 constDecl: "const" . constDefList ";"

    $default  reduce using rule 7 (constDefList)

    constDefList  go to state 10


State 5

    2 block: "begin" constDecls . varDecls procDecls stmts "end"
    3 constDecls: constDecls . ';' constDecl

    ';'  shift, and go to state 11

    $default  reduce using rule 11 (empty)

    varDecls  go to state 12
    empty     go to state 13


State 6

    4 constDecls: constDecl .

    $default  reduce using rule 4 (constDecls)


State 7

    5 constDecls: empty .

    $default  reduce using rule 5 (constDecls)


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: block "." .

    $default  reduce using rule 1 (program)


State 10

    6 constDecl: "const" constDefList . ";"

    ";"  shift, and go to state 14


State 11

    3 constDecls: constDecls ';' . constDecl

    "const"  shift, and go to state 4

    constDecl  go to state 15


State 12

    2 block: "begin" constDecls varDecls . procDecls stmts "end"

    $default  reduce using rule 11 (empty)

    procDecls  go to state 16
    empty      go to state 17


State 13

    8 varDecls: empty .

    $default  reduce using rule 8 (varDecls)


State 14

    6 constDecl: "const" constDefList ";" .

    $default  reduce using rule 6 (constDecl)


State 15

    3 constDecls: constDecls ';' constDecl .

    $default  reduce using rule 3 (constDecls)


State 16

    2 block: "begin" constDecls varDecls procDecls . stmts "end"

    $default  reduce using rule 11 (empty)

    stmts  go to state 18
    empty  go to state 19


State 17

    9 procDecls: empty .

    $default  reduce using rule 9 (procDecls)


State 18

    2 block: "begin" constDecls varDecls procDecls stmts . "end"

    "end"  shift, and go to state 20


State 19

   10 stmts: empty .

    $default  reduce using rule 10 (stmts)


State 20

    2 block: "begin" constDecls varDecls procDecls stmts "end" .

    $default  reduce using rule 2 (block)
