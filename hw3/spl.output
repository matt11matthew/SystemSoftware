Nonterminals useless in grammar

    varDecl
    identList
    procDecl


Terminals unused in grammar

    "var"
    "proc"


Rules useless in grammar

   55 varDecl: "var" identList

   56 identList: identsym
   57          | identList "," identsym

   58 procDecl: "proc" identsym block


Rules useless in parser due to conflicts

   10 constDef: identsym "=" numbersym


State 22 conflicts: 2 reduce/reduce


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: "begin" constDecls varDecls procDecls stmts "end"

    3 constDecls: constDecls ";" constDecl
    4           | constDecl
    5           | empty

    6 constDecl: "const" constDefList ";"

    7 constDefList: constDef
    8             | constDefList "," constDef

    9 constDef: identsym "=" numbersym
   10         | identsym "=" numbersym

   11 varDecls: empty

   12 procDecls: empty

   13 stmts: empty
   14      | stmtList

   15 empty: %empty

   16 stmtList: stmt
   17         | stmtList ";" stmt

   18 stmt: assignStmt
   19     | callStmt
   20     | ifStmt
   21     | whileStmt
   22     | readStmt
   23     | printStmt
   24     | blockStmt

   25 assignStmt: identsym ":=" expr

   26 callStmt: "call" identsym

   27 ifStmt: "if" condition "then" stmts "else" stmts "end"
   28       | "if" condition "then" stmts "end"

   29 whileStmt: "while" condition "do" stmts "end"

   30 readStmt: "read" identsym

   31 printStmt: "print" expr

   32 blockStmt: block

   33 condition: dbCondition
   34          | relOpCondition

   35 dbCondition: "divisible" expr "by" expr

   36 relOpCondition: expr relOp expr

   37 relOp: "=="
   38      | "!="
   39      | "<"
   40      | "<="
   41      | ">"
   42      | ">="

   43 expr: term
   44     | expr "+" term
   45     | expr "-" term

   46 term: factor
   47     | term "*" factor
   48     | term "/" factor

   49 factor: identsym
   50       | numbersym
   51       | sign factor
   52       | "(" expr ")"

   53 sign: "-"
   54     | "+"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 10 25 26 30 49
    numbersym <number> (259) 9 10 50
    "+" <token> (260) 44 54
    "-" <token> (261) 45 53
    "*" <token> (262) 47
    "/" <token> (263) 48
    "." <token> (264) 1
    ";" <token> (265) 3 6 17
    "=" <token> (266) 9 10
    "," <token> (267) 8
    ":=" <token> (268) 25
    "(" <token> (269) 52
    ")" <token> (270) 52
    "const" <token> (271) 6
    "var" <token> (272)
    "proc" <token> (273)
    "call" <token> (274) 26
    "begin" <token> (275) 2
    "end" <token> (276) 2 27 28 29
    "if" <token> (277) 27 28
    "then" <token> (278) 27 28
    "else" <token> (279) 27
    "while" <token> (280) 29
    "do" <token> (281) 29
    "read" <token> (282) 30
    "print" <token> (283) 31
    "divisible" <token> (284) 35
    "by" <token> (285) 35
    "==" <token> (286) 37
    "!=" <token> (287) 38
    "<" <token> (288) 39
    "<=" <token> (289) 40
    ">" <token> (290) 41
    ">=" <token> (291) 42


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <block> (38)
        on left: 1
        on right: 0
    block <block> (39)
        on left: 2
        on right: 1 32
    constDecls <const_decls> (40)
        on left: 3 4 5
        on right: 2 3
    constDecl <const_decl> (41)
        on left: 6
        on right: 3 4
    constDefList <const_def_list> (42)
        on left: 7 8
        on right: 6 8
    constDef <const_def> (43)
        on left: 9 10
        on right: 7 8
    varDecls <var_decls> (44)
        on left: 11
        on right: 2
    procDecls <proc_decls> (45)
        on left: 12
        on right: 2
    stmts <stmts> (46)
        on left: 13 14
        on right: 2 27 28 29
    empty <empty> (47)
        on left: 15
        on right: 5 11 12 13
    stmtList <stmt_list> (48)
        on left: 16 17
        on right: 14 17
    stmt <stmt> (49)
        on left: 18 19 20 21 22 23 24
        on right: 16 17
    assignStmt <assign_stmt> (50)
        on left: 25
        on right: 18
    callStmt <call_stmt> (51)
        on left: 26
        on right: 19
    ifStmt <if_stmt> (52)
        on left: 27 28
        on right: 20
    whileStmt <while_stmt> (53)
        on left: 29
        on right: 21
    readStmt <read_stmt> (54)
        on left: 30
        on right: 22
    printStmt <print_stmt> (55)
        on left: 31
        on right: 23
    blockStmt <block_stmt> (56)
        on left: 32
        on right: 24
    condition <condition> (57)
        on left: 33 34
        on right: 27 28 29
    dbCondition <db_condition> (58)
        on left: 35
        on right: 33
    relOpCondition <rel_op_condition> (59)
        on left: 36
        on right: 34
    relOp <token> (60)
        on left: 37 38 39 40 41 42
        on right: 36
    expr <expr> (61)
        on left: 43 44 45
        on right: 25 31 35 36 44 45 52
    term <expr> (62)
        on left: 46 47 48
        on right: 43 44 45 47 48
    factor <expr> (63)
        on left: 49 50 51 52
        on right: 46 47 48 51
    sign (64)
        on left: 53 54
        on right: 51


State 0

    0 $accept: . program $end

    "begin"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: "begin" . constDecls varDecls procDecls stmts "end"

    "const"  shift, and go to state 4

    $default  reduce using rule 15 (empty)

    constDecls  go to state 5
    constDecl   go to state 6
    empty       go to state 7


State 2

    0 $accept: program . $end

    $end  shift, and go to state 8


State 3

    1 program: block . "."

    "."  shift, and go to state 9


State 4

    6 constDecl: "const" . constDefList ";"

    identsym  shift, and go to state 10

    constDefList  go to state 11
    constDef      go to state 12


State 5

    2 block: "begin" constDecls . varDecls procDecls stmts "end"
    3 constDecls: constDecls . ";" constDecl

    ";"  shift, and go to state 13

    $default  reduce using rule 15 (empty)

    varDecls  go to state 14
    empty     go to state 15


State 6

    4 constDecls: constDecl .

    $default  reduce using rule 4 (constDecls)


State 7

    5 constDecls: empty .

    $default  reduce using rule 5 (constDecls)


State 8

    0 $accept: program $end .

    $default  accept


State 9

    1 program: block "." .

    $default  reduce using rule 1 (program)


State 10

    9 constDef: identsym . "=" numbersym
   10         | identsym . "=" numbersym

    "="  shift, and go to state 16


State 11

    6 constDecl: "const" constDefList . ";"
    8 constDefList: constDefList . "," constDef

    ";"  shift, and go to state 17
    ","  shift, and go to state 18


State 12

    7 constDefList: constDef .

    $default  reduce using rule 7 (constDefList)


State 13

    3 constDecls: constDecls ";" . constDecl

    "const"  shift, and go to state 4

    constDecl  go to state 19


State 14

    2 block: "begin" constDecls varDecls . procDecls stmts "end"

    $default  reduce using rule 15 (empty)

    procDecls  go to state 20
    empty      go to state 21


State 15

   11 varDecls: empty .

    $default  reduce using rule 11 (varDecls)


State 16

    9 constDef: identsym "=" . numbersym
   10         | identsym "=" . numbersym

    numbersym  shift, and go to state 22


State 17

    6 constDecl: "const" constDefList ";" .

    $default  reduce using rule 6 (constDecl)


State 18

    8 constDefList: constDefList "," . constDef

    identsym  shift, and go to state 10

    constDef  go to state 23


State 19

    3 constDecls: constDecls ";" constDecl .

    $default  reduce using rule 3 (constDecls)


State 20

    2 block: "begin" constDecls varDecls procDecls . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "print"   shift, and go to state 29

    $default  reduce using rule 15 (empty)

    block       go to state 30
    stmts       go to state 31
    empty       go to state 32
    stmtList    go to state 33
    stmt        go to state 34
    assignStmt  go to state 35
    callStmt    go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    printStmt   go to state 40
    blockStmt   go to state 41


State 21

   12 procDecls: empty .

    $default  reduce using rule 12 (procDecls)


State 22

    9 constDef: identsym "=" numbersym .
   10         | identsym "=" numbersym .

    ";"       reduce using rule 9 (constDef)
    ";"       [reduce using rule 10 (constDef)]
    ","       reduce using rule 9 (constDef)
    ","       [reduce using rule 10 (constDef)]
    $default  reduce using rule 9 (constDef)

    reduce/reduce conflict on tokens ";", ",":
        9 constDef: identsym "=" numbersym .
       10 constDef: identsym "=" numbersym .
      Example: identsym "=" numbersym .
      First reduce derivation
        constDef
        `-> 9: identsym "=" numbersym .
      Second reduce derivation
        constDef
        `-> 10: identsym "=" numbersym .



State 23

    8 constDefList: constDefList "," constDef .

    $default  reduce using rule 8 (constDefList)


State 24

   25 assignStmt: identsym . ":=" expr

    ":="  shift, and go to state 42


State 25

   26 callStmt: "call" . identsym

    identsym  shift, and go to state 43


State 26

   27 ifStmt: "if" . condition "then" stmts "else" stmts "end"
   28       | "if" . condition "then" stmts "end"

    identsym     shift, and go to state 44
    numbersym    shift, and go to state 45
    "+"          shift, and go to state 46
    "-"          shift, and go to state 47
    "("          shift, and go to state 48
    "divisible"  shift, and go to state 49

    condition       go to state 50
    dbCondition     go to state 51
    relOpCondition  go to state 52
    expr            go to state 53
    term            go to state 54
    factor          go to state 55
    sign            go to state 56


State 27

   29 whileStmt: "while" . condition "do" stmts "end"

    identsym     shift, and go to state 44
    numbersym    shift, and go to state 45
    "+"          shift, and go to state 46
    "-"          shift, and go to state 47
    "("          shift, and go to state 48
    "divisible"  shift, and go to state 49

    condition       go to state 57
    dbCondition     go to state 51
    relOpCondition  go to state 52
    expr            go to state 53
    term            go to state 54
    factor          go to state 55
    sign            go to state 56


State 28

   30 readStmt: "read" . identsym

    identsym  shift, and go to state 58


State 29

   31 printStmt: "print" . expr

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 59
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 30

   32 blockStmt: block .

    $default  reduce using rule 32 (blockStmt)


State 31

    2 block: "begin" constDecls varDecls procDecls stmts . "end"

    "end"  shift, and go to state 60


State 32

   13 stmts: empty .

    $default  reduce using rule 13 (stmts)


State 33

   14 stmts: stmtList .
   17 stmtList: stmtList . ";" stmt

    ";"  shift, and go to state 61

    $default  reduce using rule 14 (stmts)


State 34

   16 stmtList: stmt .

    $default  reduce using rule 16 (stmtList)


State 35

   18 stmt: assignStmt .

    $default  reduce using rule 18 (stmt)


State 36

   19 stmt: callStmt .

    $default  reduce using rule 19 (stmt)


State 37

   20 stmt: ifStmt .

    $default  reduce using rule 20 (stmt)


State 38

   21 stmt: whileStmt .

    $default  reduce using rule 21 (stmt)


State 39

   22 stmt: readStmt .

    $default  reduce using rule 22 (stmt)


State 40

   23 stmt: printStmt .

    $default  reduce using rule 23 (stmt)


State 41

   24 stmt: blockStmt .

    $default  reduce using rule 24 (stmt)


State 42

   25 assignStmt: identsym ":=" . expr

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 62
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 43

   26 callStmt: "call" identsym .

    $default  reduce using rule 26 (callStmt)


State 44

   49 factor: identsym .

    $default  reduce using rule 49 (factor)


State 45

   50 factor: numbersym .

    $default  reduce using rule 50 (factor)


State 46

   54 sign: "+" .

    $default  reduce using rule 54 (sign)


State 47

   53 sign: "-" .

    $default  reduce using rule 53 (sign)


State 48

   52 factor: "(" . expr ")"

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 63
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 49

   35 dbCondition: "divisible" . expr "by" expr

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 64
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 50

   27 ifStmt: "if" condition . "then" stmts "else" stmts "end"
   28       | "if" condition . "then" stmts "end"

    "then"  shift, and go to state 65


State 51

   33 condition: dbCondition .

    $default  reduce using rule 33 (condition)


State 52

   34 condition: relOpCondition .

    $default  reduce using rule 34 (condition)


State 53

   36 relOpCondition: expr . relOp expr
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"   shift, and go to state 66
    "-"   shift, and go to state 67
    "=="  shift, and go to state 68
    "!="  shift, and go to state 69
    "<"   shift, and go to state 70
    "<="  shift, and go to state 71
    ">"   shift, and go to state 72
    ">="  shift, and go to state 73

    relOp  go to state 74


State 54

   43 expr: term .
   47 term: term . "*" factor
   48     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    $default  reduce using rule 43 (expr)


State 55

   46 term: factor .

    $default  reduce using rule 46 (term)


State 56

   51 factor: sign . factor

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    factor  go to state 77
    sign    go to state 56


State 57

   29 whileStmt: "while" condition . "do" stmts "end"

    "do"  shift, and go to state 78


State 58

   30 readStmt: "read" identsym .

    $default  reduce using rule 30 (readStmt)


State 59

   31 printStmt: "print" expr .
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67

    $default  reduce using rule 31 (printStmt)


State 60

    2 block: "begin" constDecls varDecls procDecls stmts "end" .

    $default  reduce using rule 2 (block)


State 61

   17 stmtList: stmtList ";" . stmt

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "print"   shift, and go to state 29

    block       go to state 30
    stmt        go to state 79
    assignStmt  go to state 35
    callStmt    go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    printStmt   go to state 40
    blockStmt   go to state 41


State 62

   25 assignStmt: identsym ":=" expr .
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67

    $default  reduce using rule 25 (assignStmt)


State 63

   44 expr: expr . "+" term
   45     | expr . "-" term
   52 factor: "(" expr . ")"

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67
    ")"  shift, and go to state 80


State 64

   35 dbCondition: "divisible" expr . "by" expr
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"   shift, and go to state 66
    "-"   shift, and go to state 67
    "by"  shift, and go to state 81


State 65

   27 ifStmt: "if" condition "then" . stmts "else" stmts "end"
   28       | "if" condition "then" . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "print"   shift, and go to state 29

    $default  reduce using rule 15 (empty)

    block       go to state 30
    stmts       go to state 82
    empty       go to state 32
    stmtList    go to state 33
    stmt        go to state 34
    assignStmt  go to state 35
    callStmt    go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    printStmt   go to state 40
    blockStmt   go to state 41


State 66

   44 expr: expr "+" . term

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    term    go to state 83
    factor  go to state 55
    sign    go to state 56


State 67

   45 expr: expr "-" . term

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    term    go to state 84
    factor  go to state 55
    sign    go to state 56


State 68

   37 relOp: "==" .

    $default  reduce using rule 37 (relOp)


State 69

   38 relOp: "!=" .

    $default  reduce using rule 38 (relOp)


State 70

   39 relOp: "<" .

    $default  reduce using rule 39 (relOp)


State 71

   40 relOp: "<=" .

    $default  reduce using rule 40 (relOp)


State 72

   41 relOp: ">" .

    $default  reduce using rule 41 (relOp)


State 73

   42 relOp: ">=" .

    $default  reduce using rule 42 (relOp)


State 74

   36 relOpCondition: expr relOp . expr

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 85
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 75

   47 term: term "*" . factor

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    factor  go to state 86
    sign    go to state 56


State 76

   48 term: term "/" . factor

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    factor  go to state 87
    sign    go to state 56


State 77

   51 factor: sign factor .

    $default  reduce using rule 51 (factor)


State 78

   29 whileStmt: "while" condition "do" . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "print"   shift, and go to state 29

    $default  reduce using rule 15 (empty)

    block       go to state 30
    stmts       go to state 88
    empty       go to state 32
    stmtList    go to state 33
    stmt        go to state 34
    assignStmt  go to state 35
    callStmt    go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    printStmt   go to state 40
    blockStmt   go to state 41


State 79

   17 stmtList: stmtList ";" stmt .

    $default  reduce using rule 17 (stmtList)


State 80

   52 factor: "(" expr ")" .

    $default  reduce using rule 52 (factor)


State 81

   35 dbCondition: "divisible" expr "by" . expr

    identsym   shift, and go to state 44
    numbersym  shift, and go to state 45
    "+"        shift, and go to state 46
    "-"        shift, and go to state 47
    "("        shift, and go to state 48

    expr    go to state 89
    term    go to state 54
    factor  go to state 55
    sign    go to state 56


State 82

   27 ifStmt: "if" condition "then" stmts . "else" stmts "end"
   28       | "if" condition "then" stmts . "end"

    "end"   shift, and go to state 90
    "else"  shift, and go to state 91


State 83

   44 expr: expr "+" term .
   47 term: term . "*" factor
   48     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    $default  reduce using rule 44 (expr)


State 84

   45 expr: expr "-" term .
   47 term: term . "*" factor
   48     | term . "/" factor

    "*"  shift, and go to state 75
    "/"  shift, and go to state 76

    $default  reduce using rule 45 (expr)


State 85

   36 relOpCondition: expr relOp expr .
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67

    $default  reduce using rule 36 (relOpCondition)


State 86

   47 term: term "*" factor .

    $default  reduce using rule 47 (term)


State 87

   48 term: term "/" factor .

    $default  reduce using rule 48 (term)


State 88

   29 whileStmt: "while" condition "do" stmts . "end"

    "end"  shift, and go to state 92


State 89

   35 dbCondition: "divisible" expr "by" expr .
   44 expr: expr . "+" term
   45     | expr . "-" term

    "+"  shift, and go to state 66
    "-"  shift, and go to state 67

    $default  reduce using rule 35 (dbCondition)


State 90

   28 ifStmt: "if" condition "then" stmts "end" .

    $default  reduce using rule 28 (ifStmt)


State 91

   27 ifStmt: "if" condition "then" stmts "else" . stmts "end"

    identsym  shift, and go to state 24
    "call"    shift, and go to state 25
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 26
    "while"   shift, and go to state 27
    "read"    shift, and go to state 28
    "print"   shift, and go to state 29

    $default  reduce using rule 15 (empty)

    block       go to state 30
    stmts       go to state 93
    empty       go to state 32
    stmtList    go to state 33
    stmt        go to state 34
    assignStmt  go to state 35
    callStmt    go to state 36
    ifStmt      go to state 37
    whileStmt   go to state 38
    readStmt    go to state 39
    printStmt   go to state 40
    blockStmt   go to state 41


State 92

   29 whileStmt: "while" condition "do" stmts "end" .

    $default  reduce using rule 29 (whileStmt)


State 93

   27 ifStmt: "if" condition "then" stmts "else" stmts . "end"

    "end"  shift, and go to state 94


State 94

   27 ifStmt: "if" condition "then" stmts "else" stmts "end" .

    $default  reduce using rule 27 (ifStmt)
