Nonterminals useless in grammar

    procDecl


Terminals unused in grammar

    "proc"


State 5 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block "."

    2 block: "begin" constDecls varDecls procDecls stmts "end"

    3 constDecls: constDecls ";" constDecl
    4           | constDecl
    5           | empty

    6 constDecl: "const" constDefList ";"

    7 constDefList: constDef
    8             | constDefList "," constDef

    9 constDef: identsym "=" numbersym

   10 varDecls: varDecls ";" varDecl
   11         | varDecl
   12         | empty

   13 varDecl: "var" identList ";"

   14 identList: identsym
   15          | identList "," identsym

   16 procDecls: empty

   17 stmts: empty
   18      | stmtList

   19 empty: ε

   20 stmtList: stmt
   21         | stmtList ";" stmt

   22 stmt: assignStmt
   23     | callStmt
   24     | ifStmt
   25     | whileStmt
   26     | readStmt
   27     | printStmt
   28     | blockStmt

   29 assignStmt: identsym ":=" expr

   30 callStmt: "call" identsym

   31 ifStmt: "if" condition "then" stmts "else" stmts "end"
   32       | "if" condition "then" stmts "end"

   33 whileStmt: "while" condition "do" stmts "end"

   34 readStmt: "read" identsym

   35 printStmt: "print" expr

   36 blockStmt: block

   37 condition: dbCondition
   38          | relOpCondition

   39 dbCondition: "divisible" expr "by" expr

   40 relOpCondition: expr relOp expr

   41 relOp: "=="
   42      | "!="
   43      | "<"
   44      | "<="
   45      | ">"
   46      | ">="

   47 expr: term
   48     | expr "+" term
   49     | expr "-" term

   50 term: factor
   51     | term "*" factor
   52     | term "/" factor

   53 factor: identsym
   54       | numbersym
   55       | sign factor
   56       | "(" expr ")"

   57 sign: "-"
   58     | "+"


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    identsym <ident> (258) 9 14 15 29 30 34 53
    numbersym <number> (259) 9 54
    "+" <token> (260) 48 58
    "-" <token> (261) 49 57
    "*" <token> (262) 51
    "/" <token> (263) 52
    "." <token> (264) 1
    ";" <token> (265) 3 6 10 13 21
    "=" <token> (266) 9
    "," <token> (267) 8 15
    ":=" <token> (268) 29
    "(" <token> (269) 56
    ")" <token> (270) 56
    "const" <token> (271) 6
    "var" <token> (272) 13
    "proc" <token> (273)
    "call" <token> (274) 30
    "begin" <token> (275) 2
    "end" <token> (276) 2 31 32 33
    "if" <token> (277) 31 32
    "then" <token> (278) 31 32
    "else" <token> (279) 31
    "while" <token> (280) 33
    "do" <token> (281) 33
    "read" <token> (282) 34
    "print" <token> (283) 35
    "divisible" <token> (284) 39
    "by" <token> (285) 39
    "==" <token> (286) 41
    "!=" <token> (287) 42
    "<" <token> (288) 43
    "<=" <token> (289) 44
    ">" <token> (290) 45
    ">=" <token> (291) 46


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    program <block> (38)
        on left: 1
        on right: 0
    block <block> (39)
        on left: 2
        on right: 1 36
    constDecls <const_decls> (40)
        on left: 3 4 5
        on right: 2 3
    constDecl <const_decl> (41)
        on left: 6
        on right: 3 4
    constDefList <const_def_list> (42)
        on left: 7 8
        on right: 6 8
    constDef <const_def> (43)
        on left: 9
        on right: 7 8
    varDecls <var_decls> (44)
        on left: 10 11 12
        on right: 2 10
    varDecl <var_decl> (45)
        on left: 13
        on right: 10 11
    identList <ident_list> (46)
        on left: 14 15
        on right: 13 15
    procDecls <proc_decls> (47)
        on left: 16
        on right: 2
    stmts <stmts> (48)
        on left: 17 18
        on right: 2 31 32 33
    empty <empty> (49)
        on left: 19
        on right: 5 12 16 17
    stmtList <stmt_list> (50)
        on left: 20 21
        on right: 18 21
    stmt <stmt> (51)
        on left: 22 23 24 25 26 27 28
        on right: 20 21
    assignStmt <assign_stmt> (52)
        on left: 29
        on right: 22
    callStmt <call_stmt> (53)
        on left: 30
        on right: 23
    ifStmt <if_stmt> (54)
        on left: 31 32
        on right: 24
    whileStmt <while_stmt> (55)
        on left: 33
        on right: 25
    readStmt <read_stmt> (56)
        on left: 34
        on right: 26
    printStmt <print_stmt> (57)
        on left: 35
        on right: 27
    blockStmt <block_stmt> (58)
        on left: 36
        on right: 28
    condition <condition> (59)
        on left: 37 38
        on right: 31 32 33
    dbCondition <db_condition> (60)
        on left: 39
        on right: 37
    relOpCondition <rel_op_condition> (61)
        on left: 40
        on right: 38
    relOp <token> (62)
        on left: 41 42 43 44 45 46
        on right: 40
    expr <expr> (63)
        on left: 47 48 49
        on right: 29 35 39 40 48 49 56
    term <expr> (64)
        on left: 50 51 52
        on right: 47 48 49 51 52
    factor <expr> (65)
        on left: 53 54 55 56
        on right: 50 51 52 55
    sign (66)
        on left: 57 58
        on right: 55


State 0

    0 $accept: • program $end

    "begin"  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: "begin" • constDecls varDecls procDecls stmts "end"

    "const"  shift, and go to state 4

    $default  reduce using rule 19 (empty)

    constDecls  go to state 5
    constDecl   go to state 6
    empty       go to state 7


State 2

    0 $accept: program • $end

    $end  shift, and go to state 8


State 3

    1 program: block • "."

    "."  shift, and go to state 9


State 4

    6 constDecl: "const" • constDefList ";"

    identsym  shift, and go to state 10

    constDefList  go to state 11
    constDef      go to state 12


State 5

    2 block: "begin" constDecls • varDecls procDecls stmts "end"
    3 constDecls: constDecls • ";" constDecl

    ";"    shift, and go to state 13
    "var"  shift, and go to state 14

    ";"       [reduce using rule 19 (empty)]
    $default  reduce using rule 19 (empty)

    varDecls  go to state 15
    varDecl   go to state 16
    empty     go to state 17

    shift/reduce conflict on token ";":
       19 empty: ε •
        3 constDecls: constDecls • ";" constDecl
      First example: "begin" constDecls • ";" constDecl varDecls procDecls stmts "end" $end
      Shift derivation
        $accept
        ↳ 0: block                                                                       $end
             ↳ 2: "begin" constDecls                      varDecls procDecls stmts "end"
                          ↳ 3: constDecls • ";" constDecl
      Second example: "begin" constDecls • ";" varDecl procDecls stmts "end" "." $end
      Reduce derivation
        $accept
        ↳ 0: program                                                                                  $end
             ↳ 1: block                                                                           "."
                  ↳ 2: "begin" constDecls varDecls                          procDecls stmts "end"
                                          ↳ 10: varDecls        ";" varDecl
                                                ↳ 12: empty
                                                      ↳ 19: ε •



State 6

    4 constDecls: constDecl •

    $default  reduce using rule 4 (constDecls)


State 7

    5 constDecls: empty •

    $default  reduce using rule 5 (constDecls)


State 8

    0 $accept: program $end •

    $default  accept


State 9

    1 program: block "." •

    $default  reduce using rule 1 (program)


State 10

    9 constDef: identsym • "=" numbersym

    "="  shift, and go to state 18


State 11

    6 constDecl: "const" constDefList • ";"
    8 constDefList: constDefList • "," constDef

    ";"  shift, and go to state 19
    ","  shift, and go to state 20


State 12

    7 constDefList: constDef •

    $default  reduce using rule 7 (constDefList)


State 13

    3 constDecls: constDecls ";" • constDecl

    "const"  shift, and go to state 4

    constDecl  go to state 21


State 14

   13 varDecl: "var" • identList ";"

    identsym  shift, and go to state 22

    identList  go to state 23


State 15

    2 block: "begin" constDecls varDecls • procDecls stmts "end"
   10 varDecls: varDecls • ";" varDecl

    ";"  shift, and go to state 24

    $default  reduce using rule 19 (empty)

    procDecls  go to state 25
    empty      go to state 26


State 16

   11 varDecls: varDecl •

    $default  reduce using rule 11 (varDecls)


State 17

   12 varDecls: empty •

    $default  reduce using rule 12 (varDecls)


State 18

    9 constDef: identsym "=" • numbersym

    numbersym  shift, and go to state 27


State 19

    6 constDecl: "const" constDefList ";" •

    $default  reduce using rule 6 (constDecl)


State 20

    8 constDefList: constDefList "," • constDef

    identsym  shift, and go to state 10

    constDef  go to state 28


State 21

    3 constDecls: constDecls ";" constDecl •

    $default  reduce using rule 3 (constDecls)


State 22

   14 identList: identsym •

    $default  reduce using rule 14 (identList)


State 23

   13 varDecl: "var" identList • ";"
   15 identList: identList • "," identsym

    ";"  shift, and go to state 29
    ","  shift, and go to state 30


State 24

   10 varDecls: varDecls ";" • varDecl

    "var"  shift, and go to state 14

    varDecl  go to state 31


State 25

    2 block: "begin" constDecls varDecls procDecls • stmts "end"

    identsym  shift, and go to state 32
    "call"    shift, and go to state 33
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 34
    "while"   shift, and go to state 35
    "read"    shift, and go to state 36
    "print"   shift, and go to state 37

    $default  reduce using rule 19 (empty)

    block       go to state 38
    stmts       go to state 39
    empty       go to state 40
    stmtList    go to state 41
    stmt        go to state 42
    assignStmt  go to state 43
    callStmt    go to state 44
    ifStmt      go to state 45
    whileStmt   go to state 46
    readStmt    go to state 47
    printStmt   go to state 48
    blockStmt   go to state 49


State 26

   16 procDecls: empty •

    $default  reduce using rule 16 (procDecls)


State 27

    9 constDef: identsym "=" numbersym •

    $default  reduce using rule 9 (constDef)


State 28

    8 constDefList: constDefList "," constDef •

    $default  reduce using rule 8 (constDefList)


State 29

   13 varDecl: "var" identList ";" •

    $default  reduce using rule 13 (varDecl)


State 30

   15 identList: identList "," • identsym

    identsym  shift, and go to state 50


State 31

   10 varDecls: varDecls ";" varDecl •

    $default  reduce using rule 10 (varDecls)


State 32

   29 assignStmt: identsym • ":=" expr

    ":="  shift, and go to state 51


State 33

   30 callStmt: "call" • identsym

    identsym  shift, and go to state 52


State 34

   31 ifStmt: "if" • condition "then" stmts "else" stmts "end"
   32       | "if" • condition "then" stmts "end"

    identsym     shift, and go to state 53
    numbersym    shift, and go to state 54
    "+"          shift, and go to state 55
    "-"          shift, and go to state 56
    "("          shift, and go to state 57
    "divisible"  shift, and go to state 58

    condition       go to state 59
    dbCondition     go to state 60
    relOpCondition  go to state 61
    expr            go to state 62
    term            go to state 63
    factor          go to state 64
    sign            go to state 65


State 35

   33 whileStmt: "while" • condition "do" stmts "end"

    identsym     shift, and go to state 53
    numbersym    shift, and go to state 54
    "+"          shift, and go to state 55
    "-"          shift, and go to state 56
    "("          shift, and go to state 57
    "divisible"  shift, and go to state 58

    condition       go to state 66
    dbCondition     go to state 60
    relOpCondition  go to state 61
    expr            go to state 62
    term            go to state 63
    factor          go to state 64
    sign            go to state 65


State 36

   34 readStmt: "read" • identsym

    identsym  shift, and go to state 67


State 37

   35 printStmt: "print" • expr

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 68
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 38

   36 blockStmt: block •

    $default  reduce using rule 36 (blockStmt)


State 39

    2 block: "begin" constDecls varDecls procDecls stmts • "end"

    "end"  shift, and go to state 69


State 40

   17 stmts: empty •

    $default  reduce using rule 17 (stmts)


State 41

   18 stmts: stmtList •
   21 stmtList: stmtList • ";" stmt

    ";"  shift, and go to state 70

    $default  reduce using rule 18 (stmts)


State 42

   20 stmtList: stmt •

    $default  reduce using rule 20 (stmtList)


State 43

   22 stmt: assignStmt •

    $default  reduce using rule 22 (stmt)


State 44

   23 stmt: callStmt •

    $default  reduce using rule 23 (stmt)


State 45

   24 stmt: ifStmt •

    $default  reduce using rule 24 (stmt)


State 46

   25 stmt: whileStmt •

    $default  reduce using rule 25 (stmt)


State 47

   26 stmt: readStmt •

    $default  reduce using rule 26 (stmt)


State 48

   27 stmt: printStmt •

    $default  reduce using rule 27 (stmt)


State 49

   28 stmt: blockStmt •

    $default  reduce using rule 28 (stmt)


State 50

   15 identList: identList "," identsym •

    $default  reduce using rule 15 (identList)


State 51

   29 assignStmt: identsym ":=" • expr

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 71
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 52

   30 callStmt: "call" identsym •

    $default  reduce using rule 30 (callStmt)


State 53

   53 factor: identsym •

    $default  reduce using rule 53 (factor)


State 54

   54 factor: numbersym •

    $default  reduce using rule 54 (factor)


State 55

   58 sign: "+" •

    $default  reduce using rule 58 (sign)


State 56

   57 sign: "-" •

    $default  reduce using rule 57 (sign)


State 57

   56 factor: "(" • expr ")"

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 72
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 58

   39 dbCondition: "divisible" • expr "by" expr

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 73
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 59

   31 ifStmt: "if" condition • "then" stmts "else" stmts "end"
   32       | "if" condition • "then" stmts "end"

    "then"  shift, and go to state 74


State 60

   37 condition: dbCondition •

    $default  reduce using rule 37 (condition)


State 61

   38 condition: relOpCondition •

    $default  reduce using rule 38 (condition)


State 62

   40 relOpCondition: expr • relOp expr
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"   shift, and go to state 75
    "-"   shift, and go to state 76
    "=="  shift, and go to state 77
    "!="  shift, and go to state 78
    "<"   shift, and go to state 79
    "<="  shift, and go to state 80
    ">"   shift, and go to state 81
    ">="  shift, and go to state 82

    relOp  go to state 83


State 63

   47 expr: term •
   51 term: term • "*" factor
   52     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 47 (expr)


State 64

   50 term: factor •

    $default  reduce using rule 50 (term)


State 65

   55 factor: sign • factor

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    factor  go to state 86
    sign    go to state 65


State 66

   33 whileStmt: "while" condition • "do" stmts "end"

    "do"  shift, and go to state 87


State 67

   34 readStmt: "read" identsym •

    $default  reduce using rule 34 (readStmt)


State 68

   35 printStmt: "print" expr •
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 35 (printStmt)


State 69

    2 block: "begin" constDecls varDecls procDecls stmts "end" •

    $default  reduce using rule 2 (block)


State 70

   21 stmtList: stmtList ";" • stmt

    identsym  shift, and go to state 32
    "call"    shift, and go to state 33
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 34
    "while"   shift, and go to state 35
    "read"    shift, and go to state 36
    "print"   shift, and go to state 37

    block       go to state 38
    stmt        go to state 88
    assignStmt  go to state 43
    callStmt    go to state 44
    ifStmt      go to state 45
    whileStmt   go to state 46
    readStmt    go to state 47
    printStmt   go to state 48
    blockStmt   go to state 49


State 71

   29 assignStmt: identsym ":=" expr •
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 29 (assignStmt)


State 72

   48 expr: expr • "+" term
   49     | expr • "-" term
   56 factor: "(" expr • ")"

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76
    ")"  shift, and go to state 89


State 73

   39 dbCondition: "divisible" expr • "by" expr
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"   shift, and go to state 75
    "-"   shift, and go to state 76
    "by"  shift, and go to state 90


State 74

   31 ifStmt: "if" condition "then" • stmts "else" stmts "end"
   32       | "if" condition "then" • stmts "end"

    identsym  shift, and go to state 32
    "call"    shift, and go to state 33
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 34
    "while"   shift, and go to state 35
    "read"    shift, and go to state 36
    "print"   shift, and go to state 37

    $default  reduce using rule 19 (empty)

    block       go to state 38
    stmts       go to state 91
    empty       go to state 40
    stmtList    go to state 41
    stmt        go to state 42
    assignStmt  go to state 43
    callStmt    go to state 44
    ifStmt      go to state 45
    whileStmt   go to state 46
    readStmt    go to state 47
    printStmt   go to state 48
    blockStmt   go to state 49


State 75

   48 expr: expr "+" • term

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    term    go to state 92
    factor  go to state 64
    sign    go to state 65


State 76

   49 expr: expr "-" • term

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    term    go to state 93
    factor  go to state 64
    sign    go to state 65


State 77

   41 relOp: "==" •

    $default  reduce using rule 41 (relOp)


State 78

   42 relOp: "!=" •

    $default  reduce using rule 42 (relOp)


State 79

   43 relOp: "<" •

    $default  reduce using rule 43 (relOp)


State 80

   44 relOp: "<=" •

    $default  reduce using rule 44 (relOp)


State 81

   45 relOp: ">" •

    $default  reduce using rule 45 (relOp)


State 82

   46 relOp: ">=" •

    $default  reduce using rule 46 (relOp)


State 83

   40 relOpCondition: expr relOp • expr

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 94
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 84

   51 term: term "*" • factor

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    factor  go to state 95
    sign    go to state 65


State 85

   52 term: term "/" • factor

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    factor  go to state 96
    sign    go to state 65


State 86

   55 factor: sign factor •

    $default  reduce using rule 55 (factor)


State 87

   33 whileStmt: "while" condition "do" • stmts "end"

    identsym  shift, and go to state 32
    "call"    shift, and go to state 33
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 34
    "while"   shift, and go to state 35
    "read"    shift, and go to state 36
    "print"   shift, and go to state 37

    $default  reduce using rule 19 (empty)

    block       go to state 38
    stmts       go to state 97
    empty       go to state 40
    stmtList    go to state 41
    stmt        go to state 42
    assignStmt  go to state 43
    callStmt    go to state 44
    ifStmt      go to state 45
    whileStmt   go to state 46
    readStmt    go to state 47
    printStmt   go to state 48
    blockStmt   go to state 49


State 88

   21 stmtList: stmtList ";" stmt •

    $default  reduce using rule 21 (stmtList)


State 89

   56 factor: "(" expr ")" •

    $default  reduce using rule 56 (factor)


State 90

   39 dbCondition: "divisible" expr "by" • expr

    identsym   shift, and go to state 53
    numbersym  shift, and go to state 54
    "+"        shift, and go to state 55
    "-"        shift, and go to state 56
    "("        shift, and go to state 57

    expr    go to state 98
    term    go to state 63
    factor  go to state 64
    sign    go to state 65


State 91

   31 ifStmt: "if" condition "then" stmts • "else" stmts "end"
   32       | "if" condition "then" stmts • "end"

    "end"   shift, and go to state 99
    "else"  shift, and go to state 100


State 92

   48 expr: expr "+" term •
   51 term: term • "*" factor
   52     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 48 (expr)


State 93

   49 expr: expr "-" term •
   51 term: term • "*" factor
   52     | term • "/" factor

    "*"  shift, and go to state 84
    "/"  shift, and go to state 85

    $default  reduce using rule 49 (expr)


State 94

   40 relOpCondition: expr relOp expr •
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 40 (relOpCondition)


State 95

   51 term: term "*" factor •

    $default  reduce using rule 51 (term)


State 96

   52 term: term "/" factor •

    $default  reduce using rule 52 (term)


State 97

   33 whileStmt: "while" condition "do" stmts • "end"

    "end"  shift, and go to state 101


State 98

   39 dbCondition: "divisible" expr "by" expr •
   48 expr: expr • "+" term
   49     | expr • "-" term

    "+"  shift, and go to state 75
    "-"  shift, and go to state 76

    $default  reduce using rule 39 (dbCondition)


State 99

   32 ifStmt: "if" condition "then" stmts "end" •

    $default  reduce using rule 32 (ifStmt)


State 100

   31 ifStmt: "if" condition "then" stmts "else" • stmts "end"

    identsym  shift, and go to state 32
    "call"    shift, and go to state 33
    "begin"   shift, and go to state 1
    "if"      shift, and go to state 34
    "while"   shift, and go to state 35
    "read"    shift, and go to state 36
    "print"   shift, and go to state 37

    $default  reduce using rule 19 (empty)

    block       go to state 38
    stmts       go to state 102
    empty       go to state 40
    stmtList    go to state 41
    stmt        go to state 42
    assignStmt  go to state 43
    callStmt    go to state 44
    ifStmt      go to state 45
    whileStmt   go to state 46
    readStmt    go to state 47
    printStmt   go to state 48
    blockStmt   go to state 49


State 101

   33 whileStmt: "while" condition "do" stmts "end" •

    $default  reduce using rule 33 (whileStmt)


State 102

   31 ifStmt: "if" condition "then" stmts "else" stmts • "end"

    "end"  shift, and go to state 103


State 103

   31 ifStmt: "if" condition "then" stmts "else" stmts "end" •

    $default  reduce using rule 31 (ifStmt)
