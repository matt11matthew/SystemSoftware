==12440== Memcheck, a memory error detector
==12440== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==12440== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==12440== Command: ./compiler custom.spl
==12440== 
==12440== Conditional jump or move depends on uninitialised value(s)
==12440==    at 0x10B99E: scope_check_stmts (scope_check.c:204)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440== 
==12440== Conditional jump or move depends on uninitialised value(s)
==12440==    at 0x10B9C7: scope_check_stmts (scope_check.c:210)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440== 
==12440== Conditional jump or move depends on uninitialised value(s)
==12440==    at 0x10B4DA: scope_check_stmt (scope_check.c:175)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440== 
==12440== Use of uninitialised value of size 8
==12440==    at 0x10B4E4: scope_check_stmt (scope_check.c:177)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440== 
==12440== Invalid read of size 4
==12440==    at 0x10B4E4: scope_check_stmt (scope_check.c:177)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440==  Address 0xdff000175 is not stack'd, malloc'd or (recently) free'd
==12440== 
==12440== 
==12440== Process terminating with default action of signal 11 (SIGSEGV)
==12440==  Access not within mapped region at address 0xDFF000175
==12440==    at 0x10B4E4: scope_check_stmt (scope_check.c:177)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10B40A: scope_check_if_stmt (scope_check.c:154)
==12440==    by 0x10B7C5: scope_check_stmt (scope_check.c:190)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12440==    by 0x10B63E: scope_check_stmt (scope_check.c:186)
==12440==    by 0x10B9B5: scope_check_stmts (scope_check.c:211)
==12440==    by 0x10A928: scope_check_program (scope_check.c:29)
==12440==    by 0x113A56: main (compiler_main.c:44)
==12440==  If you believe this happened as a result of a stack
==12440==  overflow in your program's main thread (unlikely but
==12440==  possible), you can try to increase the size of the
==12440==  main thread stack using the --main-stacksize= flag.
==12440==  The main thread stack size used in this run was 8388608.
==12440== 
==12440== HEAP SUMMARY:
==12440==     in use at exit: 94,329 bytes in 235 blocks
==12440==   total heap usage: 237 allocs, 2 frees, 98,897 bytes allocated
==12440== 
==12440== LEAK SUMMARY:
==12440==    definitely lost: 811 bytes in 67 blocks
==12440==    indirectly lost: 0 bytes in 0 blocks
==12440==      possibly lost: 0 bytes in 0 blocks
==12440==    still reachable: 93,518 bytes in 168 blocks
==12440==         suppressed: 0 bytes in 0 blocks
==12440== Rerun with --leak-check=full to see details of leaked memory
==12440== 
==12440== Use --track-origins=yes to see where uninitialised values come from
==12440== For lists of detected and suppressed errors, rerun with: -s
==12440== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
