==12138== Memcheck, a memory error detector
==12138== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==12138== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==12138== Command: ./compiler custom.spl
==12138== 
==12138== Conditional jump or move depends on uninitialised value(s)
==12138==    at 0x10B9A0: scope_check_stmts (scope_check.c:201)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138== 
==12138== Conditional jump or move depends on uninitialised value(s)
==12138==    at 0x10B9C9: scope_check_stmts (scope_check.c:207)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138== 
==12138== Conditional jump or move depends on uninitialised value(s)
==12138==    at 0x10B4DC: scope_check_stmt (scope_check.c:172)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138== 
==12138== Use of uninitialised value of size 8
==12138==    at 0x10B4E6: scope_check_stmt (scope_check.c:174)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138== 
==12138== Invalid read of size 4
==12138==    at 0x10B4E6: scope_check_stmt (scope_check.c:174)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138==  Address 0xdff000175 is not stack'd, malloc'd or (recently) free'd
==12138== 
==12138== 
==12138== Process terminating with default action of signal 11 (SIGSEGV)
==12138==  Access not within mapped region at address 0xDFF000175
==12138==    at 0x10B4E6: scope_check_stmt (scope_check.c:174)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10B40C: scope_check_if_stmt (scope_check.c:151)
==12138==    by 0x10B7C7: scope_check_stmt (scope_check.c:187)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A83E: scope_check_program_s (scope_check.c:20)
==12138==    by 0x10B640: scope_check_stmt (scope_check.c:183)
==12138==    by 0x10B9B7: scope_check_stmts (scope_check.c:208)
==12138==    by 0x10A928: scope_check_program (scope_check.c:29)
==12138==    by 0x113A58: main (compiler_main.c:44)
==12138==  If you believe this happened as a result of a stack
==12138==  overflow in your program's main thread (unlikely but
==12138==  possible), you can try to increase the size of the
==12138==  main thread stack using the --main-stacksize= flag.
==12138==  The main thread stack size used in this run was 8388608.
==12138== 
==12138== HEAP SUMMARY:
==12138==     in use at exit: 94,329 bytes in 235 blocks
==12138==   total heap usage: 237 allocs, 2 frees, 98,897 bytes allocated
==12138== 
==12138== LEAK SUMMARY:
==12138==    definitely lost: 811 bytes in 67 blocks
==12138==    indirectly lost: 0 bytes in 0 blocks
==12138==      possibly lost: 0 bytes in 0 blocks
==12138==    still reachable: 93,518 bytes in 168 blocks
==12138==         suppressed: 0 bytes in 0 blocks
==12138== Rerun with --leak-check=full to see details of leaked memory
==12138== 
==12138== Use --track-origins=yes to see where uninitialised values come from
==12138== For lists of detected and suppressed errors, rerun with: -s
==12138== ERROR SUMMARY: 5 errors from 5 contexts (suppressed: 0 from 0)
